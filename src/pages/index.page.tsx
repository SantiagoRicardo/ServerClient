import { type NextPage } from "next";
import Head from "next/head";
import { api } from "$/utils/api";
import Link from "next/link";
import { useForm } from "react-hook-form";
import {
  questionSchema,
  type QuestionSchema,
} from "$/server/api/routers/schema";
import { zodResolver } from "@hookform/resolvers/zod";

const Home: NextPage = () => {
  const getAllQuery = api.questions.getAll.useQuery();
  const utils = api.useContext();
  const createMutation = api.questions.create.useMutation({
    onSuccess: (res) => {
      if (res == null) return;

      const data = utils.questions.getAll.getData() ?? [];
      utils.questions.getAll.setData(undefined, [...data, res]);
    },
  });

  const form = useForm<Pick<QuestionSchema, "question">>({
    defaultValues: {
      question: "",
    },
    mode: "onSubmit",
    reValidateMode: "onChange",
    resolver: zodResolver(questionSchema.pick({ question: true })),
  });

  return (
    <>
      <Head>
        <title>Servidor Cliente</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center gap-8 bg-neutral-800 p-12">
        <form
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          onSubmit={form.handleSubmit((data) => {
            void createMutation.mutate(data);
            form.reset();
          })}
          className="flex flex-col gap-2"
        >
          <label className="flex w-[30rem] flex-col gap-2 text-neutral-100">
            Add a question
            <input
              type="text"
              className="rounded-md bg-neutral-700 p-2 text-neutral-100 placeholder-neutral-500"
              placeholder="Ask a question..."
              {...form.register("question")}
            />
            {form.formState.errors.question && (
              <span className="font-medium text-red-500">
                {form.formState.errors.question.message}
              </span>
            )}
          </label>

          <button
            type="submit"
            className="rounded-md bg-blue-600 p-2 font-bold text-neutral-100"
          >
            Add
          </button>
        </form>

        <div className="flex flex-col gap-2">
          {getAllQuery.data?.map((question) => (
            <div
              key={question.id}
              className="flex items-center gap-2 rounded bg-neutral-700 px-6 py-2 text-neutral-100"
            >
              {question.question}

              <Link
                href={`/${question.id}`}
                className="font-medium text-orange-500"
              >
                View
              </Link>
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
